Wednesday, October 08, 2008
Using TSQL Function: OBJECT_ID()
 
The TSQL Function OBJECT_ID() returns the ID of the specific object. SQL Server internally assigns an ID to every object. This function has got a number of usages. I use this function to check for the existence of a table or procedure before dropping it.

There are a number of ways to check the existence of a database object. For example, if you want to check if a given table exists or not, you can do it in different ways. A few options are given below.

-- SQL Server 2000 and 2005
IF EXISTS(
    SELECT * FROM INFORMATION_SCHEMA.TABLES
    WHERE TABLE_NAME = 'Categories' AND TABLE_TYPE = 'BASE TABLE')
PRINT 'Table exists'

-- SQL Server 2000 and 2005
IF EXISTS(
    SELECT * FROM sysobjects
    WHERE name = 'Categories' AND xtype = 'U'  )
PRINT 'Table exists'

-- SQL Server 2005
IF EXISTS(
    SELECT * FROM sys.objects
    WHERE name = 'Categories' AND type = 'U'
)
PRINT 'Table exists'

-- SQL Server 2005
IF EXISTS(
    SELECT * FROM sys.tables
    WHERE name = 'Categories'
)
PRINT 'Table exists'This code can be simplified by using the OBJECT_ID() function as:

IF OBJECT_ID('Categories') IS NOT NULL
    PRINT 'Table exists'If the object exists, the function returns the ID of it. If the object does not exist, it returns NULL. 

USING OBJECT_ID() FUNCTION

By default, OBJECT_ID() assumes current database and default schema of the user, if you do not pass a fully qualified name to the function. For example, the following code checks for the existence of table "categories" having schema "dbo"  (I am assuming "dbo" as the default schema of the current user) in the current database.

IF OBJECT_ID('Categories') IS NOT NULL
    PRINT 'Table exists'The following 4 usages are equivalent.

IF OBJECT_ID('Categories') IS NOT NULL
    PRINT 'Table exists'
    
IF OBJECT_ID('dbo.Categories') IS NOT NULL
    PRINT 'Table exists'
    
IF OBJECT_ID('xmlworkshop.dbo.Categories') IS NOT NULL
    PRINT 'Table exists'
    
IF OBJECT_ID('xmlworkshop..Categories') IS NOT NULL
    PRINT 'Table exists'Using OBJECT_ID() you can also check if an object exists in another database. For example:

IF OBJECT_ID('SomeOtherDatabase.dbo.Categories') IS NOT NULL
    PRINT 'Table exists'    If the database, schema or the object does not exist, SQL server does not generate an error, instead will return NULL. 

Checking the existence of TEMP tables

You can also use OBJECT_ID() function to check the existence of TEMP tables. The following example demonstrates it.

-- create a temp table
CREATE TABLE #localTemp (ID INT)
GO

-- check if the table exists
IF OBJECT_ID('tempdb..#localTemp') IS NOT NULL
    PRINT 'Table exists'    
    
-- create a global temp table
CREATE TABLE ##globalTemp (ID INT)
GO

-- check if the table exists
IF OBJECT_ID('tempdb..##globalTemp') IS NOT NULL
    PRINT 'Table exists'TEMP tables are created in "tempdb" database and hence you should specify the database name when using OBJECT_ID() to check for their existence. 

Checking the existence of other objects

Though, I have mentioned only tables, in my examples, OBJECT_ID() can be used to check the existence of other objects except "non-schema-scoped" objects like database triggers. 

Using Object Type parameter in OBJECT_ID()

If your job involves generating scripts for DB objects to be created on a foreign database, you must have come across cases where your script fails because an object with the same name already exists in the target database. Detecting the existence of an object with the same name is not a pain, but the drop statement is the real pain. The drop statement for each object is different, for example, to drop a table, we need DROP TABLE and to drop a procedure we need DROP PROCEDURE.

It would have been easier if SQL Server supports the following.

IF OBJECT_ID('myobject') IS NOT NULL
    DROP OBJECT myobject
    
CREATE TABLE/PROCEDURE/WHATEVER myobject .....Unfortunately, that does not work. We need to check if the object exists and if it exists, we should check if it is a TABLE, PROCEDURE, VIEW etc and execute the appropriate drop statement.  For example: 

-- If an Object named "categories" exists and if it is a "table" drop it.
IF OBJECT_ID('Categories') IS NOT NULL AND
    OBJECTPROPERTY(OBJECT_ID('Categories'),'isTable') = 1
    DROP TABLE Categories

-- If an Object named "categories" exists and if it is a "procedure" drop it.
IF OBJECT_ID('Categories') IS NOT NULL AND
    OBJECTPROPERTY(OBJECT_ID('Categories'),'isProcedure') = 1
    DROP PROCEDURE Categories    SQL Server 2005 added a new optional parameter to the OBJECT_ID() function that simplifies this. In SQL Server 2005 and above, you can specify the object type as the second parameter. Here is the modified version of the above queries.

-- If an Object named "categories" exists and 
-- if it is a "table" drop it.
IF OBJECT_ID('Categories', 'U') IS NOT NULL 
    DROP TABLE Categories

-- If an Object named "categories" exists and 
-- if it is a "procedure" drop it.
IF OBJECT_ID('Categories', 'P') IS NOT NULL 
    DROP PROCEDURE Categories    Here is a list of object types that you can pass to OBJECT_ID() function.

/*
AF = Aggregate function (CLR)
C = CHECK constraint
D = DEFAULT (constraint or stand-alone)
F = FOREIGN KEY constraint
PK = PRIMARY KEY constraint
P = SQL stored procedure
PC = Assembly (CLR) stored procedure
FN = SQL scalar function
FS = Assembly (CLR) scalar function
FT = Assembly (CLR) table-valued function
R = Rule (old-style, stand-alone)
RF = Replication-filter-procedure
S = System base table
SN = Synonym
SQ = Service queue
TA = Assembly (CLR) DML trigger
TR = SQL DML trigger
IF = SQL inline table-valued function
TF = SQL table-valued-function
U = Table (user-defined)
UQ = UNIQUE constraint
V = View
X = Extended stored procedure
IT = Internal table
*/Checking the existence of functions

Checking the existence of functions can be little tricky because SQL Server categorizes them into 3 categories: inline, table-valued and scalar. While you could easily distinguish between a scalar function from a table-valued function, many people might find it hard to distinguish between a "table-valued" function and an "inline" function.

When checking for the existence of a function, you need to call OBJECT_ID() function 3 times, one for each: scalar, table-valued and inline. To understand this, let us create 3 functions belonging to each category. 

-- create a SCALAR function
CREATE FUNCTION dbo.MyScalarFunction 
(
    -- no paramters for now
)
RETURNS INT
AS
BEGIN
    RETURN 0
END
GO

-- create a TABLE VALUED FUNCTION
CREATE FUNCTION dbo.MyTableValuedFunction 
(
    -- no parameters for now
)
RETURNS @t TABLE (id int)
AS
BEGIN
    INSERT INTO @t (id) 
        SELECT 1 UNION ALL
        SELECT 2
    RETURN 
END
GO

-- create an INLINE TABLE VALUED FUNCTION
CREATE FUNCTION dbo.MyInlineTableValuedFunction
(
    -- no parameters for now
)
RETURNS TABLE
RETURN (
    SELECT 1 AS id
    UNION ALL SELECT 2
)
GOLet us make sure that the functions work correctly.

SELECT dbo.MyScalarFunction() AS id
/*
id
-----------
0
*/
SELECT * FROM dbo.MyTableValuedFunction()
/*
id
-----------
1
2
*/
SELECT * FROM dbo.MyInlineTableValuedFunction()
/*
id
-----------
1
2
*/Here is the code to check if the functions exist.

IF OBJECT_ID('dbo.MyScalarFunction','FN') IS NOT NULL
    PRINT 'dbo.MyScalarFunction Exists and is Scalar'

IF OBJECT_ID('dbo.MyTableValuedFunction','TF') IS NOT NULL
    PRINT 'dbo.MyTableValuedFunction Exists and is Table-valued'
    
IF OBJECT_ID('dbo.MyInlineTableValuedFunction','IF') IS NOT NULL
    PRINT 'dbo.MyTableValuedFunction Exists and is Inline'Note that we called the function with "IF", "TF" and "FN" to check if there is a "scalar", "table valued" or "inline" function exists with the specified name. I think this adds some additional complexity in using OBJECT_ID() function. 

